{
    "title": "Chart Values",
    "type": "object",
    "properties": {
        "global": {
            "type": "object",
            "properties": {
                "imageRegistry": {
                    "type": "string",
                    "description": "Global Docker image registry",
                    "default": ""
                },
                "imagePullSecrets": {
                    "type": "array",
                    "description": "Docker login secrets name for image pull",
                    "default": [],
                    "nullable": true,
                    "items": {}
                },
                "env": {
                    "type": "string",
                    "description": "The environment name (deprecated not used)",
                    "default": ""
                }
            }
        },
        "nameOverride": {
            "type": "string",
            "description": "String to partially override common.names.name",
            "default": ""
        },
        "fullnameOverride": {
            "type": "string",
            "description": "String to fully override common.names.fullname",
            "default": ""
        },
        "namespaceOverride": {
            "type": "string",
            "description": "String to fully override common.names.namespace",
            "default": ""
        },
        "commonLabels": {
            "type": "object",
            "description": "Labels to add to all deployed objects",
            "default": {}
        },
        "commonAnnotations": {
            "type": "object",
            "description": "Annotations to add to all deployed objects",
            "default": {}
        },
        "clusterDomain": {
            "type": "string",
            "description": "Kubernetes cluster domain name",
            "default": "cluster.local"
        },
        "extraDeploy": {
            "type": "array",
            "description": "Array of extra objects to deploy with the release",
            "default": [],
            "items": {}
        },
        "gateway": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Docker registry to use",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Image in repository format (conduktor/conduktor-gateway)",
                            "default": "conduktor/conduktor-gateway"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Image tag",
                            "default": "3.12.0"
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Kubernetes image pull policy",
                            "default": "IfNotPresent"
                        }
                    }
                },
                "replicas": {
                    "type": "number",
                    "description": "number of gateway instances to be deployed",
                    "default": 2
                },
                "secretRef": {
                    "type": "string",
                    "description": "Secret name to load sensitive env var from",
                    "default": ""
                },
                "extraSecretEnvVars": {
                    "type": "array",
                    "description": "Array with extra secret environment variables",
                    "default": [],
                    "items": {}
                },
                "secretSha256sum": {
                    "type": "string",
                    "description": "Optional sha256sum of the referenced secret. This could be set to have a automactic restart of gateway deployment if secret change",
                    "default": "",
                    "nullable": true
                },
                "licenseKey": {
                    "type": "string",
                    "description": "License key to activate Conduktor Gateway not used if `gateway.secretRef` is set",
                    "default": ""
                },
                "userPool": {
                    "type": "object",
                    "properties": {
                        "secretKey": {
                            "type": "string",
                            "description": "Secret key (256bits) encoded in base64 to sign service accounts credentials when `SASL_PLAIN` or `SASL_SSL` is used for `GATEWAY_SECURITY_PROTOCOL`. If empty, a random key will be generated. Not used if `gateway.secretRef` is set.",
                            "default": ""
                        }
                    }
                },
                "interceptors": {
                    "type": "string",
                    "description": "Json configuration for interceptors to be loaded at startup by Gateway",
                    "default": "[]"
                },
                "portRange": {
                    "type": "object",
                    "properties": {
                        "start": {
                            "type": "number",
                            "description": "Start port of the gateway port range",
                            "default": 9092
                        },
                        "count": {
                            "type": "number",
                            "description": "Max number of broker to expose",
                            "default": 7
                        }
                    }
                },
                "admin": {
                    "type": "object",
                    "properties": {
                        "port": {
                            "type": "number",
                            "description": "Admin HTTP server port",
                            "default": 8888
                        },
                        "users": {
                            "type": "array",
                            "description": "API Admin username. (not used if `gateway.secretRef` is set)",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "username": {
                                        "type": "string",
                                        "description": "API Admin username. (not used if `gateway.secretRef` is set)"
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "API Admin password. If empty, a random password will be generated (not used if `gateway.secretRef` is set)"
                                    },
                                    "admin": {
                                        "type": "boolean",
                                        "description": "API user admin role flag. (not used if `gateway.secretRef` is set)"
                                    }
                                }
                            }
                        },
                        "mainAdminSecretKeys": {
                            "type": "object",
                            "properties": {
                                "username": {
                                    "type": "string",
                                    "description": "Secret key used to store the username of the main admin user from `gateway.admin.users` (first with admin role)",
                                    "default": "GATEWAY_ADMIN_USERNAME"
                                },
                                "password": {
                                    "type": "string",
                                    "description": "Secret key used to store the password of the main admin user from `gateway.admin.users` (first with admin role)",
                                    "default": "GATEWAY_ADMIN_PASSWORD"
                                }
                            }
                        },
                        "securedMetrics": {
                            "type": "boolean",
                            "description": "Enable secured metrics using api users credentials. If `gateway.secretRef` is set, this can't be used by `metrics.prometheus` to automatically configure basic auth on scrapping.",
                            "default": true
                        }
                    }
                },
                "jmx": {
                    "type": "object",
                    "properties": {
                        "enable": {
                            "type": "boolean",
                            "description": "Enable JMX JVM options",
                            "default": false
                        },
                        "port": {
                            "type": "number",
                            "description": "JMX port to expose by default JVM args",
                            "default": 9999
                        },
                        "jvmArgs": {
                            "type": "string",
                            "description": "Arguments to pass to the gateway container JVM",
                            "default": "-Dcom.sun.management.jmxremote.port={{ .Values.gateway.jmx.port }} -Dcom.sun.management.jmxremote.rmi.port={{ .Values.gateway.jmx.port }} -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1"
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "properties": {
                                "cpu": {
                                    "type": "string",
                                    "description": "CPU limit for the platform container",
                                    "default": "2000m"
                                },
                                "memory": {
                                    "type": "string",
                                    "description": "Memory limit for the container",
                                    "default": "4Gi"
                                }
                            }
                        },
                        "requests": {
                            "type": "object",
                            "properties": {
                                "cpu": {
                                    "type": "string",
                                    "description": "CPU resource requests",
                                    "default": "500m"
                                },
                                "memory": {
                                    "type": "string",
                                    "description": "Memory resource requests",
                                    "default": "500Mi"
                                }
                            }
                        }
                    }
                },
                "podLabels": {
                    "type": "object",
                    "description": "Specific labels to be added to Gateway pod by deployment",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Gateway pod annotations",
                    "default": {}
                },
                "securityContext": {
                    "type": "object",
                    "description": "Conduktor Gateway container Security Context",
                    "default": {}
                },
                "volumes": {
                    "type": "array",
                    "description": "Define user specific volumes for Gateway deployment",
                    "default": [],
                    "items": {}
                },
                "volumeMounts": {
                    "type": "array",
                    "description": "Define user specific volumeMounts for Gateway container in deployment",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to run into the Conduktor Gateway pod(s)",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the Conduktor Gateway pod(s). ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
                    "default": [],
                    "items": {}
                },
                "terminationGracePeriodSeconds": {
                    "type": "number",
                    "description": "Duration in seconds the pod needs to terminate gracefully.",
                    "default": 30
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Define Gateway pods' priority based on an existing ClassName",
                    "default": ""
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Custom startup probe configuration",
                    "default": {}
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe on Conduktor Gaterway containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 10
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 1
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 5
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Custom liveness probe configuration",
                    "default": {}
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe on Conduktor Gaterway containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 0
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 5
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 1
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 3
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Custom readiness probe configuration",
                    "default": {}
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe on Conduktor Gaterway containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 0
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 5
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 1
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 3
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                }
            }
        },
        "tls": {
            "type": "object",
            "properties": {
                "enable": {
                    "type": "boolean",
                    "description": "Enable TLS injection into Gateway",
                    "default": false
                },
                "secretRef": {
                    "type": "string",
                    "description": "Secret name with keystore to load",
                    "default": ""
                },
                "keystoreKey": {
                    "type": "string",
                    "description": "Key in the secret to load as keystore",
                    "default": "keystore.jks"
                },
                "keystoreFile": {
                    "type": "string",
                    "description": "File name to mount keystore as",
                    "default": "keystore.jks"
                }
            }
        },
        "service": {
            "type": "object",
            "properties": {
                "external": {
                    "type": "object",
                    "properties": {
                        "enable": {
                            "type": "boolean",
                            "description": "Enable a service for external connection to Gateway",
                            "default": false
                        },
                        "type": {
                            "type": "string",
                            "description": "Type of load balancer",
                            "default": "ClusterIP"
                        },
                        "ip": {
                            "type": "string",
                            "description": "IP to configure",
                            "default": ""
                        },
                        "annotations": {
                            "type": "object",
                            "description": "",
                            "default": {}
                        },
                        "labels": {
                            "type": "object",
                            "description": "Labels to be added to Gateway internal service",
                            "default": {}
                        },
                        "admin": {
                            "type": "boolean",
                            "description": "Enable admin exposition on external service",
                            "default": false
                        },
                        "jmx": {
                            "type": "boolean",
                            "description": "Enable jmx exposition on external service",
                            "default": false
                        },
                        "extraSpecs": {
                            "type": "object",
                            "description": "Extra specs for the service to be added under `spec` key",
                            "default": {}
                        }
                    }
                },
                "internal": {
                    "type": "object",
                    "properties": {
                        "annotations": {
                            "type": "object",
                            "description": "",
                            "default": {}
                        },
                        "labels": {
                            "type": "object",
                            "description": "Labels to be added to Gateway internal service",
                            "default": {}
                        },
                        "extraSpecs": {
                            "type": "object",
                            "description": "Extra specs for the service to be added under `spec` key",
                            "default": {}
                        }
                    }
                }
            }
        },
        "ingress": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable ingress for Gateway",
                    "default": false
                },
                "pathType": {
                    "type": "string",
                    "description": "Ingress path type",
                    "default": "ImplementationSpecific"
                },
                "apiVersion": {
                    "type": "string",
                    "description": "Force Ingress API version (automatically detected if not set)",
                    "default": ""
                },
                "hostname": {
                    "type": "string",
                    "description": "Default host for the ingress record",
                    "default": "gateway.local"
                },
                "ingressClassName": {
                    "type": "string",
                    "description": "IngressClass that will be used to implement the Ingress (Kubernetes 1.18+)",
                    "default": ""
                },
                "path": {
                    "type": "string",
                    "description": "Default path for the ingress record",
                    "default": "/"
                },
                "annotations": {
                    "type": "object",
                    "description": "Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.",
                    "default": {}
                },
                "tls": {
                    "type": "boolean",
                    "description": "Enable TLS configuration for the host defined at `ingress.hostname` parameter",
                    "default": false
                },
                "selfSigned": {
                    "type": "boolean",
                    "description": "Create a TLS secret for this ingress record using self-signed certificates generated by Helm",
                    "default": false
                },
                "extraHosts": {
                    "type": "array",
                    "description": "An array with additional hostname(s) to be covered with the ingress record",
                    "default": [],
                    "items": {}
                },
                "extraPaths": {
                    "type": "array",
                    "description": "An array with additional arbitrary paths that may need to be added to the ingress under the main host",
                    "default": [],
                    "items": {}
                },
                "extraTls": {
                    "type": "array",
                    "description": "TLS configuration for additional hostname(s) to be covered with this ingress record",
                    "default": [],
                    "items": {}
                },
                "secrets": {
                    "type": "array",
                    "description": "Custom TLS certificates as secrets",
                    "default": [],
                    "items": {}
                },
                "extraRules": {
                    "type": "array",
                    "description": "Additional rules to be covered with this ingress record",
                    "default": [],
                    "items": {}
                }
            }
        },
        "metrics": {
            "type": "object",
            "properties": {
                "alerts": {
                    "type": "object",
                    "properties": {
                        "enable": {
                            "type": "boolean",
                            "description": "Enable Prometheus alerts if Prometheus alerts rules are supported on cluster",
                            "default": false
                        }
                    }
                },
                "prometheus": {
                    "type": "object",
                    "properties": {
                        "enable": {
                            "type": "boolean",
                            "description": "Enable ServiceMonitor Prometheus operator configuration for metrics scrapping",
                            "default": false
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional custom annotations for the ServiceMonitor",
                            "default": {}
                        },
                        "labels": {
                            "type": "object",
                            "description": "Extra labels for the ServiceMonitor",
                            "default": {}
                        },
                        "scheme": {
                            "type": "string",
                            "description": "Protocol scheme to use for scraping (http or https). By default, automatically resolved based on container TLS configuration.",
                            "default": ""
                        },
                        "tlsConfig": {
                            "type": "object",
                            "description": "TLS configuration for the ServiceMonitor. By default, configured to skip TLS validation.",
                            "default": {}
                        },
                        "jobLabel": {
                            "type": "string",
                            "description": "The name of the label on the target service to use as the job name in Prometheus",
                            "default": "app.kubernetes.io/instance"
                        },
                        "metricRelabelings": {
                            "type": "object",
                            "description": "Configure metric relabeling in ServiceMonitor",
                            "default": {}
                        },
                        "relabelings": {
                            "type": "object",
                            "description": "Configure relabelings in ServiceMonitor",
                            "default": {}
                        },
                        "extraParams": {
                            "type": "object",
                            "description": "Extra parameters in ServiceMonitor. See https://prometheus-operator.dev/docs/api-reference/api/#monitoring.coreos.com/v1.Endpoint",
                            "default": {}
                        }
                    }
                },
                "grafana": {
                    "type": "object",
                    "properties": {
                        "enable": {
                            "type": "boolean",
                            "description": "Enable Grafana dashboards to installation. Dashboards can be installed as Sidecar ConfigMap or using Grafana operator CRDs (v4 or v5)",
                            "default": false
                        },
                        "namespace": {
                            "type": "string",
                            "description": "Namespace used to deploy Grafana dashboards by default use the same namespace as Conduktor Gateway",
                            "default": ""
                        },
                        "matchLabels": {
                            "type": "object",
                            "description": "Label selector for Grafana instance (for grafana-operator v5 only)",
                            "default": {}
                        },
                        "labels": {
                            "type": "object",
                            "description": "Additional custom labels for Grafana dashboard ConfigMap. Used by Sidecar ConfigMap loading https://github.com/grafana/helm-charts/tree/main/charts/grafana#sidecar-for-dashboards",
                            "default": {}
                        },
                        "folder": {
                            "type": "string",
                            "description": "Grafana dashboard folder name",
                            "default": ""
                        },
                        "datasources": {
                            "type": "object",
                            "properties": {
                                "prometheus": {
                                    "type": "string",
                                    "description": "Prometheus datasource to use for metric dashboard",
                                    "default": "prometheus"
                                },
                                "loki": {
                                    "type": "string",
                                    "description": "Loki datasource to use for log dashboard",
                                    "default": "loki"
                                }
                            }
                        }
                    }
                }
            }
        },
        "serviceAccount": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Specifies whether a ServiceAccount should be created",
                    "default": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the ServiceAccount to use.",
                    "default": ""
                },
                "annotations": {
                    "type": "object",
                    "description": "Additional Service Account annotations (evaluated as a template)",
                    "default": {}
                },
                "automountServiceAccountToken": {
                    "type": "boolean",
                    "description": "Automount service account token for the server service account",
                    "default": true
                }
            }
        },
        "nodeSelector": {
            "type": "object",
            "description": "Container node selector",
            "default": {}
        },
        "tolerations": {
            "type": "array",
            "description": "Container tolerations",
            "default": [],
            "items": {}
        },
        "affinity": {
            "type": "object",
            "properties": {
                "nodeAffinity": {
                    "type": "object",
                    "description": "Gateway pods node affinity configuration",
                    "default": {}
                },
                "podAffinity": {
                    "type": "object",
                    "description": "Gateway pods affinity configuration",
                    "default": {}
                },
                "podAntiAffinity": {
                    "type": "object",
                    "description": "Gateway pods anti-affinity configuration",
                    "default": {}
                },
                "podAntiAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "enable": {
                            "type": "boolean",
                            "description": "Enable predefined pod anti-affinity presets that spread pods across nodes. If `affinity.podAntiAffinity` is set, this will be ignored. If both `affinity.podAntiAffinityPreset.enable` is `false` and `affinity.podAntiAffinity` is empty, no pod anti-affinity will be applied.",
                            "default": true
                        },
                        "topologyKey": {
                            "type": "string",
                            "description": "Topology key to use for pod anti-affinity preset (default: \"kubernetes.io/hostname\"). If `affinity.podAntiAffinity` is set, this will be ignored.",
                            "default": "kubernetes.io/hostname"
                        }
                    }
                }
            }
        },
        "podSecurityContext": {
            "type": "object",
            "description": "Conduktor Gateway Pod Security Context",
            "default": {}
        }
    }
}
{{- if not .Values.cronJob.enabled -}}
{{- if or .Values.console.enabled .Values.gateway.enabled -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "provisioner.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
    app.kubernetes.io/component: conduktor-provisioning
  annotations:
    {{- if and .Values.tests.enabled }}
    {{/* Add Hooks for test because chart-testing can't only use --wait-for-job helm arg with install command */}}
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
    {{- end }}
    {{- if .Values.commonAnnotations }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
    {{- end }}
spec:
  {{- if .Values.cleanupAfterFinished.enabled }}
  ttlSecondsAfterFinished: {{ .Values.cleanupAfterFinished.seconds }}
  {{- end }}
  parallelism: 1
  completions: 1
  backoffLimit: {{ .Values.backoffLimit | default 10 }}
  template:
    metadata:
      labels: {{- include "provisioner.labels" . | nindent 8 }}
        app.kubernetes.io/component: conduktor-provisioning
        checksum/manifests-cm: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum  | trunc 63 }}
        checksum/config-secrets: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum | trunc 63 }}
      {{- if .Values.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
    spec:
      {{- include "provisioner.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.schedulerName }}
      schedulerName: {{ .Values.schedulerName }}
      {{- end }}
      restartPolicy: {{ .Values.restartPolicy }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      {{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.topologySpreadConstraints "context" $) | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: 0
      {{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.podSecurityContext }}
      securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.podSecurityContext "context" $) | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ template "provisioner.serviceAccountName" . }}
      initContainers:
      {{- if .Values.console.enabled }}
        - name: wait-for-console
          image: {{ include "common.images.image" (dict "imageRoot" .Values.waitFor.image "global" .Values.global) }}
          imagePullPolicy: {{ .Values.waitFor.image.pullPolicy | quote }}
          command:
           - "/bin/sh"
           - "/wait-for.sh"
          args:
            - "{{ .Values.console.url }}/api/v1/health/ready"
          env:
            {{- if .Values.console.url}}
            - name: CDK_BASE_URL
              value: {{ .Values.console.url | quote }}
            {{- end }}
          envFrom:
            - secretRef:
                name: {{ include "provisioner.config.secrets" . }}
            {{- if .Values.console.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.console.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.console.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.console.extraEnvVarsSecret "context" $) }}
            {{- end }}
          volumeMounts:
            - name: init-script
              mountPath: /wait-for.sh
              subPath: wait-for.sh
              readOnly: true
      {{- end }}
      {{- if .Values.gateway.enabled }}
        - name: wait-for-gateway
          image: {{ include "common.images.image" (dict "imageRoot" .Values.waitFor.image "global" .Values.global) }}
          imagePullPolicy: {{ .Values.waitFor.image.pullPolicy | quote }}
          command:
            - "/bin/sh"
            - "/wait-for.sh"
          args:
            - "{{ .Values.gateway.url }}/health"
          env:
            {{- if .Values.gateway.url}}
            - name: CDK_GATEWAY_BASE_URL
              value: {{ .Values.gateway.url | quote }}
            {{- end }}
          envFrom:
            - secretRef:
                name: {{ include "provisioner.config.secrets" . }}
            {{- if .Values.gateway.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.gateway.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.gateway.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.gateway.extraEnvVarsSecret "context" $) }}
            {{- end }}
          volumeMounts:
            - name: init-script
              mountPath: /wait-for.sh
              subPath: wait-for.sh
              readOnly: true
      {{- end }}
      {{- if .Values.initContainers }}
      {{- include "common.tplvalues.render" (dict "value" .Values.initContainers "context" $) | nindent 8 }}
      {{- end }}
      containers:
      {{- if .Values.console.enabled }}
        - name: conduktor-ctl-console
          image: {{ include "common.images.image" (dict "imageRoot" .Values.image "global" .Values.global) }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          {{- if .Values.console.containerSecurityContext }}
          securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.console.containerSecurityContext "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 12 }}
          {{- else }}
          {{- if .Values.console.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.console.command "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.console.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.console.args "context" $) | nindent 12 }}
          {{- else }}
          args:
              - apply
              - -f
              - /conf/{{ .Values.console.manifestsConfigMapKey }}
          {{- end }}
          {{- end }}
          env:
            - name: CDK_DEBUG
              value: {{ .Values.console.debug | quote }}
            - name: CDK_INSECURE
              value: {{ .Values.console.insecure | quote }}
            - name: CDK_AUTH_MODE
              value: {{ .Values.console.authMode | quote }}
            {{- if .Values.console.url}}
            - name: CDK_BASE_URL
              value: {{ .Values.console.url | quote }}
            {{- end }}
            {{- if .Values.console.caCert }}
            - name: CDK_CACERT
              value: {{ .Values.console.caCert | quote }}
            {{- end }}
            {{- if .Values.console.username }}
            - name: CDK_USER
              value: {{ .Values.console.username | quote }}
            {{- end }}
            {{- if .Values.console.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.console.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            - secretRef:
                name: {{ include "provisioner.config.secrets" . }}
            {{- if .Values.console.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.console.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.console.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.console.extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- if .Values.console.resources }}
          resources: {{- toYaml .Values.console.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: tmp-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: config
              mountPath: /conf/{{ .Values.console.manifestsConfigMapKey }}
              subPath: {{ .Values.console.manifestsConfigMapKey }}
            {{- if .Values.console.extraManifestsConfigMapRef }}
            {{- range $index, $ref := .Values.console.extraManifestsConfigMapRef }}
            - name: {{ printf "console-%s-%d" $ref.name $index }}
              mountPath: /conf/{{ $ref.key }}
              subPath: {{ $ref.key }}
            {{- end }}
            {{- end }}
            {{- if .Values.console.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.console.extraVolumeMounts "context" $) | nindent 12 }}
            {{- end }}
      {{- end }}
      {{- if .Values.gateway.enabled }}
        - name: conduktor-ctl-gateway
          image: {{ include "common.images.image" (dict "imageRoot" .Values.image "global" .Values.global) }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        {{- if .Values.gateway.containerSecurityContext }}
          securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.console.containerSecurityContext "context" $) | nindent 12 }}
        {{- end }}
        {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 12 }}
        {{- else }}
        {{- if .Values.gateway.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.gateway.command "context" $) | nindent 12 }}
        {{- end }}
        {{- if .Values.gateway.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.gateway.args "context" $) | nindent 12 }}
        {{- else }}
          args:
            - apply
            - -f
            - /conf/{{ .Values.gateway.manifestsConfigMapKey }}
        {{- end }}
        {{- end }}
          env:
            - name: CDK_DEBUG
              value: {{ .Values.gateway.debug | quote }}
            - name: CDK_INSECURE
              value: {{ .Values.gateway.insecure | quote }}
          {{- if .Values.gateway.url}}
            - name: CDK_GATEWAY_BASE_URL
              value: {{ .Values.gateway.url | quote }}
          {{- end }}
          {{- if .Values.gateway.caCert }}
            - name: CDK_CACERT
              value: {{ .Values.gateway.caCert | quote }}
          {{- end }}
          {{- if .Values.gateway.username }}
            - name: CDK_GATEWAY_USER
              value: {{ .Values.gateway.username | quote }}
          {{- end }}
          {{- if .Values.gateway.extraEnvVars }}
          {{- include "common.tplvalues.render" (dict "value" .Values.gateway.extraEnvVars "context" $) | nindent 12 }}
          {{- end }}
          envFrom:
            - secretRef:
                name: {{ include "provisioner.config.secrets" . }}
          {{- if .Values.gateway.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.gateway.extraEnvVarsCM "context" $) }}
          {{- end }}
          {{- if .Values.gateway.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.gateway.extraEnvVarsSecret "context" $) }}
          {{- end }}
        {{- if .Values.gateway.resources }}
          resources: {{- toYaml .Values.gateway.resources | nindent 12 }}
        {{- end }}
          volumeMounts:
            - name: tmp-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: config
              mountPath: /conf/{{ .Values.gateway.manifestsConfigMapKey }}
              subPath: {{ .Values.gateway.manifestsConfigMapKey }}
          {{- if .Values.gateway.extraManifestsConfigMapRef }}
          {{- range $index, $ref := .Values.gateway.extraManifestsConfigMapRef }}
            - name: {{ printf "gateway-%s-%d" $ref.name $index }}
              mountPath: /conf/{{ $ref.key }}
              subPath: {{ $ref.key }}
          {{- end }}
          {{- end }}
          {{- if .Values.gateway.extraVolumeMounts }}
          {{- include "common.tplvalues.render" (dict "value" .Values.gateway.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      volumes:
        - name: tmp-dir
          emptyDir: {}
        - name: config
          configMap:
            name: {{ include "provisioner.manifests.configMapName" . }}
        - name: init-script
          configMap:
            name: {{ include "provisioner.initScript.configMapName" . }}
            defaultMode: 0755
        {{- if and .Values.console.enabled .Values.console.extraManifestsConfigMapRef }}
        {{- range $index, $ref := .Values.console.extraManifestsConfigMapRef }}
        - name: {{ printf "console-%s-%d" $ref.name $index }}
          configMap:
            name: {{ $ref.name }}
        {{- end }}
        {{- end }}
        {{- if and .Values.gateway.enabled .Values.gateway.extraManifestsConfigMapRef }}
        {{- range $index, $ref := .Values.gateway.extraManifestsConfigMapRef }}
        - name: {{ printf "gateway-%s-%d" $ref.name $index }}
          configMap:
            name: {{ $ref.name }}
        {{- end }}
        {{- end }}
        {{- if .Values.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
{{- end }}
{{- end }}
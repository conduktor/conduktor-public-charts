{{/**
This is hack so that we install a fresh postgresql (without volume) for each test.
**/}}
{{- if .Values.tests.enabled }}
{{- $postgres_password := "conduktor123" }}
{{- $postgres_db := "platform" }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-99"
  labels:
    app.kubernetes.io/component: primary
    app.kubernetes.io/instance: postgresql
    app.kubernetes.io/name: postgresql
  name: postgresql
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: primary
      app.kubernetes.io/instance: postgresql
      app.kubernetes.io/name: postgresql
  serviceName: postgresql-hl
  template:
    metadata:
      labels:
        app.kubernetes.io/component: primary
        app.kubernetes.io/instance: postgresql
        app.kubernetes.io/name: postgresql
      name: postgresql
    spec:
      containers:
        - env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: /bitnami/postgresql
            - name: PGDATA
              value: /bitnami/postgresql/data
            - name: POSTGRES_PASSWORD
              value: {{ $postgres_password }}
            - name: POSTGRES_DB
              value: {{ $postgres_db }}
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: error
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: pgaudit
          image: docker.io/bitnami/postgresql:15.3.0-debian-11-r7
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "dbname=conduktor" -h 127.0.0.1 -p
                  5432
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: postgresql
          ports:
            - containerPort: 5432
              name: tcp-postgresql
              protocol: TCP
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -d "dbname=conduktor" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /dev/shm
              name: dshm
      restartPolicy: Always
      securityContext:
        fsGroup: 1001
      terminationGracePeriodSeconds: 0
      volumes:
        - emptyDir:
            medium: Memory
          name: dshm
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-99"
  labels:
    app.kubernetes.io/component: primary
    app.kubernetes.io/instance: postgresql
    app.kubernetes.io/name: postgresql
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  name: postgresql-hl
spec:
  ports:
    - name: tcp-postgresql
      port: 5432
      protocol: TCP
      targetPort: tcp-postgresql
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/component: primary
    app.kubernetes.io/instance: postgresql
    app.kubernetes.io/name: postgresql
  type: ClusterIP
---
{{- if .Values.tests.minio }}
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-99"
  labels:
    app.kubernetes.io/instance: minio
    app.kubernetes.io/name: minio
  name: minio
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: minio
      app.kubernetes.io/name: minio
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: minio
        app.kubernetes.io/name: minio
      name: minio
    spec:
      containers:
        - env:
          - name: BITNAMI_DEBUG
            value: 'false'
          - name: MINIO_SCHEME
            value: 'http'
          - name: MINIO_FORCE_NEW_KEYS
            value: 'no'
          - name: MINIO_ROOT_USER
            value: 'admin'
          - name: MINIO_ROOT_PASSWORD
            value: 'conduktor123'
          - name: MINIO_DEFAULT_BUCKETS
            value: 'conduktor'
          - name: MINIO_BROWSER
            value: 'off'
          - name: MINIO_PROMETHEUS_AUTH_TYPE
            value: public
          - name: MINIO_CONSOLE_PORT_NUMBER
            value: '9001'
          image: docker.io/bitnami/minio:2023.7.18-debian-11-r0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: minio-api
              scheme: HTTP
            initialDelaySeconds: 5
            timeoutSeconds: 5
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          name: postgresql
          ports:
            - name: minio-api
              containerPort: 9000
              protocol: TCP
            - name: minio-console
              containerPort: 9001
              protocol: TCP
          readinessProbe:
            tcpSocket:
              port: minio-api
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          resources:
            requests:
              cpu: 150m
              memory: 200Mi
          securityContext:
            runAsUser: 1001
            runAsNonRoot: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - name: data
              mountPath: /data
      restartPolicy: Always
      securityContext:
        fsGroup: 1001
      terminationGracePeriodSeconds: 0
      volumes:
        - emptyDir:
            medium: Memory
          name: data
  strategy:
    type: Recreate
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-99"
  labels:
    app.kubernetes.io/instance: minio
    app.kubernetes.io/name: minio
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  name: minio
spec:
  ports:
    - name: minio-api
      protocol: TCP
      port: 9000
      targetPort: minio-api
    - name: minio-console
      protocol: TCP
      port: 9001
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/instance: minio
    app.kubernetes.io/name: minio
  type: ClusterIP
{{- end }}
{{- end }}

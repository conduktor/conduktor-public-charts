# Default values for platform-controller

## @param nameOverride Override the name of resources
nameOverride: ""
## @param fullnameOverride Override the full name of resources
fullnameOverride: ""

## @section Global parameters
global:
  ## @param global.imageRegistry Global Docker image registry
  imageRegistry: ""
  ## @param global.imagePullSecrets Docker login secrets name for image pull
  imagePullSecrets: []
  #    - name: ghcr

## @section Controller parameters
## @descriptionStart
## Conduktor Controller parameters
## @descriptionEnd
controller:
  ## @param controller.tolerations Tolerations for pod assignment
  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []

  ## @param controller.image.registry Platform Controller image registry
  ## @param controller.image.repository Platform Controller image repository
  ## @param controller.image.pullPolicy Platform Controller image pull policy
  ## @param controller.image.tag Platform Controller image tag
  image:
    registry: docker.io
    repository: conduktor/platform-controller
    pullPolicy: Always
    tag: 0.15.1

  ## @param controller.commonLabels Common labels to add to all resources
  commonLabels: {}

  ## @param controller.securityContext Optionally specify some Security Context.
  ## ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#securitycontext-v1-core
  ## default:
  ## securityContext:
  ##   readOnlyRootFilesystem: true
  ##   runAsNonRoot: true
  ##
  securityContext: {}

  ## @param controller.commonAnnotations Common annotations to add to all resources
  commonAnnotations: {}

  serviceAccount:
    ## @param controller.serviceAccount.create Create Kubernetes service account.
    # Specifies whether a service account should be created
    # If AWS IAM is used, need to set `create: false`
    create: true
    ## @param controller.serviceAccount.name Service account name override
    name: "conduktor-controller"

  resources:
    limits:
      ## @param controller.resources.limits.cpu CPU limit for the platform controller
      cpu: 100m
      ## @param controller.resources.limits.memory Memory limit for the platform controller
      memory: 128Mi
    requests:
      ## @param controller.resources.requests.cpu CPU resource requests for platform controller
      cpu: 100m
      ## @param controller.resources.requests.memory Memory resource requests for platform controller
      memory: 128Mi

  ingress:
    ## @param controller.ingress.enabled Enable ingress controller resource
    enabled: false
    ## @param controller.ingress.ingressClassName Ingress class name for the controller
    ingressClassName: ""
    ## @param controller.ingress.host Platform controller Host
    host: "controller.local"
    ## @param controller.ingress.extraHosts An array with additional hostname(s) to be covered with this ingress record.
    extraHosts: []
    tls:
      ## @param controller.ingress.tls.enabled Enable TLS for the controller ingress
      enabled: false
      ## @param controller.ingress.tls.host Host
      host:
      ## @param controller.ingress.tls.secretRef Secret name with keystore to load
      secretRef: ""
    ## @param controller.ingress.annotations Additional annotations for the ingress
    annotations: {}
  service:
    ## @param controller.service.annotations Annotations for controller service
    annotations: {}
    http:
      ## @param controller.service.http.port HTTP port
      port: 8080
  ## @param controller.extraEnvVars Array with extra environment variables
  ## e.g:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##
  extraEnvVars: []
  ## @param controller.extraEnvVarsCM Name of existing ConfigMap containing extra env vars
  extraEnvVarsCM: ""
  ## @param controller.extraEnvVarsSecret Name of existing Secret containing extra env vars
  extraEnvVarsSecret: ""
  metrics:
    prometheus:
      serviceMonitor:
        ## @param controller.metrics.prometheus.serviceMonitor.enabled Enable ServiceMonitor prometheus operator configuration for metrics scrapping
        enabled: false
        ## @param controller.metrics.prometheus.serviceMonitor.metricRelabelings Specify additional relabeling of metrics
        metricRelabelings: []
        # - sourceLabels: [__name__]
        #   regex: '.*ckdt_io.*'
        #   action: keep
        ## @param controller.metrics.prometheus.serviceMonitor.relabelings Specify general relabeling
        relabelings: []
  ## @param controller.podAnnotations  Map of annotations to add to the controller pods
  ## e.g:
  ## podAnnotations:
  ##   prometheus.io/scrape: "true"
  ##   prometheus.io/port: "8080"
  ##   prometheus.io/path: "/metrics"
  podAnnotations: {}

  ## @param controller.affinity Affinity for pod assignment of the controller
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ##
  affinity: {}

## @section Platform parameters
## @descriptionStart
## Conduktor Platform parameters
## @descriptionEnd
platform:
  ## @param platform.tolerations Tolerations for pod assignment.
  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []

  ## @param platform.commonLabels Common labels to add to all resources
  commonLabels: {}

  ## @param platform.image Optionally specify an image to use for the platform.
  ## @extra platform.image.registry Platform image registry
  ## @extra platform.image.repository Platform image repository
  ## @extra platform.image.tag Platform image tag. The major and minor version must be compatible with the platform version that is supported by the current controller version.
  ## default:
  ## image:
  ##   registry: docker.io
  ##   repository: conduktor/conduktor-platform
  ##   tag: {latest tag compatible with controller version}
  ##
  image: {}

  ## @param platform.ignoreImageConstraints When `true` allows the use of any tag and bypasses the constraint on tag versions.
  ## CAUTION: Enabling this parameter can lead to unintended effects or problems.
  ignoreImageConstraints: false

  ## @param platform.securityContext Optionally specify some Security Context.
  ## ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#securitycontext-v1-core
  ## default:
  ## securityContext:
  ##   readOnlyRootFilesystem: true
  ##   runAsNonRoot: true
  ##
  securityContext: {}

  ## @param platform.affinity Affinity for pod assignment of the platform
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ##
  affinity: {}

  serviceAccount:
    ## @param platform.serviceAccount.name Name of the service account that will be used by the platform
    name: ""

  ## @param platform.existingSecret Existing secret for platform
  ## The secret must contain the keys:
  ## `admin-password` (required),
  ## `database-password` (required),
  ## `license` (optional),
  ## `sso-oauth2-client-id` (optional),
  ## `sso-oauth2-client-secret` (optional),
  ## `sso-ldap-manager-password` (optional),
  ## `monitoring-s3-access-key` (optional),
  ## `monitoring-s3-secret-key` (optional),
  existingSecret: ""

  service:
    ## @param platform.service.type Kubernetes service type. Only support ClusterIP or NodePort
    ##
    type: ClusterIP
    ## @param platform.service.name Name of the platform service
    ##
    name: "platform"
    ## @param platform.service.annotations Annotations for platform service
    ## e.g.:
    ## annotations:
    ##   app.kubernetes.io/managed-by: "conduktor"
    ##
    annotations: {}
    ## @param platform.service.ports.platform Platform service port
    ##
    ports:
      platform: 80

    ## @param platform.service.nodePorts.platform Specify the platform nodePort for the NodePort service type
    nodePorts:
      platform: ""

    ## @param platform.service.clusterIP Specify the service IP for the ClusterIP service type
    ## e.g.:
    ## clusterIP: None
    ##
    clusterIP: ""

  config:
    ## @param platform.config.replicas Number of replicas for the platform controller
    replicas: 1
    ## @param platform.config.name Name of the platform controller
    name: platform
    ## @param platform.config.organization Your organizations name (mandatory)
    organization: ""
    ## @param platform.config.adminEmail Email of the admin user (mandatory)
    adminEmail: ""
    ## @param platform.config.adminPassword Password of the admin user (mandatory)
    adminPassword: ""  # pragma: allowlist secret

    ## @param platform.config.external_url Force platform external URL, useful for SSO callback URL when using reverse proxy.
    # When not provided, the platform will try to guess it automatically using X-FORWARDED-* headers coming from
    # upstream proxy.
    #
    # Format: http(s)://<host>[:<port>]
    external_url: ""

    ## @param platform.config.containerPorts.platform Platform exposed and listening port
    ##
    containerPorts:
      platform: 8080

    ## Module is the list of conduktor platform modules.
    ## @param platform.config.modules.console Enable or disable the console module
    ## @param platform.config.modules.data_masking Enable or disable the data masking module
    ## @param platform.config.modules.monitoring Enable or disable the monitoring module
    ## @param platform.config.modules.testing Enable or disable the testing module
    ## @param platform.config.modules.governance Enable or disable the governance module
    modules:
      console: true
      data_masking: true
      monitoring: true
      testing: false
      governance: true

    ## External monitoring S3 storage.  Enabling monitoring AWS S3 storage is for the production environment and if not done, the platform will use the local storage volume (not PVC) to store the monitoring data.
    ## e.g:
    ## monitoring:
    ##   storage:
    ##     s3:
    ##       bucket: "my-monitoring-bucket" (required)
    ##       accessKeyId: "my-access-key-id" (required)
    ##       secretAccessKey: "my-secret-access-key" (required)
    ##       region: "eu-west-1" (optional)
    ##       insecure: false (optional)
    ##       endpoint: "https://s3.eu-west-1.amazonaws.com" (optional)
    ##
    monitoring:
      storage:
        s3:
          ## @param platform.config.monitoring.storage.s3.bucket S3 bucket name
          # Ignored if minio.enabled is true
          bucket: ""
          ## @param platform.config.monitoring.storage.s3.endpoint S3 endpoint
          # Ignored if minio.enabled is true
          endpoint: ""
          ## @param platform.config.monitoring.storage.s3.accessKey S3 access key
          # Ignored if minio.enabled is true
          accessKey: ""
          ## @param platform.config.monitoring.storage.s3.secretKey S3 secret key
          # Ignored if minio.enabled is true
          secretKey: ""
          ## @param platform.config.monitoring.storage.s3.region S3 region
          # Ignored if minio.enabled is true
          region: ""
          ## @param platform.config.monitoring.storage.s3.insecure S3 insecure
          # Ignored if minio.enabled is true
          insecure: true

    ## @param platform.config.sso.enabled Enable or disable the SSO (only on enterprise plan)
    ## @param platform.config.sso.ignoreUntrustedCertificate Disable SSL checks
    sso:
      enabled: false
      ignoreUntrustedCertificate: false

      ## @param platform.config.sso.ldap.name LDAP connection name
      ## @param platform.config.sso.ldap.server LDAP server host and port
      ## @param platform.config.sso.ldap.managerDn Sets the manager DN
      ## @param platform.config.sso.ldap.managerPassword Sets the manager password
      ## @param platform.config.sso.ldap.searchBase  Sets the base DN to search
      ## @param platform.config.sso.ldap.groups.enabled Sets if group search is enabled
      ## @param platform.config.sso.ldap.groups.base Sets the base DN to search from
      ## @param platform.config.sso.ldap.groups.filter Sets the group search filter
      ldap:
        name: ""
        server: ""
        managerDn: ""
        managerPassword: ""
        searchBase: ""
        groups:
          enabled: false
          base: ""
          filter: ""
      ## @param platform.config.sso.oauth2.name OAuth2 connection name
      ## @param platform.config.sso.oauth2.default Use as default
      ## @param platform.config.sso.oauth2.clientId OAuth2 client id
      ## @param platform.config.sso.oauth2.clientSecret OAuth2 client secret
      ## @param platform.config.sso.oauth2.openid.issuer Issuer to check on token
      oauth2:
        name: ""
        default: true
        clientId: ""
        clientSecret: ""
        openid:
          issuer: ""
    ## @param platform.config.license Enterprise license key. If not provided, fallback to free plan.
    license: ""
    ## @extra platform.config.database Database configuration. If postgresql.enable is true, it will configure the database with postgresql.auth values
    database:
      ## @param platform.config.database.host Database host. If postgresql.enable is true, it will configure the database host to the postgresql pod name. e.g: platform-postgresql
      host: ""

      ## @param platform.config.database.port Database port
      ##
      port: 5432

      ## @param platform.config.database.username Database user. If postgresql.enable is true, it will take the postgresql.auth.username value
      username: ""

      ## @param platform.config.database.password Database password, can be a string or can reference a secret. If postgresql.enable is true, it will take the postgresql.auth.password value
      password: ""

      ## @param platform.config.database.name Database name. If postgresql.enable is true, it will take the postgresql.auth.database value
      ##
      name: "postgres"

    tls:
      ## @param platform.config.tls.enabled Enable TLS for the platform (at pod level)
      enabled: false
      ## @param platform.config.tls.cert Raw TLS certificate
      # cert: |
      #   -----BEGIN CERTIFICATE-----
      #   ...
      cert: ""
      ## @param platform.config.tls.key Raw TLS certificate
      # key: |
      #   -----BEGIN PRIVATE KEY-----
      #   ...
      key: ""
      ## @param platform.config.tls.existingSecret Secret name with certificate (must have keys: tls.crt, tls.key)
      # platform.config.tls.cert and platform.config.tls.key will be ignored if provided
      existingSecret: ""
  ## @param platform.extraEnvVars Array with extra environment variables
  ## e.g:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##
  extraEnvVars: []
  ## @param platform.extraEnvVarsCM Name of existing ConfigMap containing extra env vars
  extraEnvVarsCM: ""
  ## @param platform.extraEnvVarsSecret Name of existing Secret containing extra env vars
  extraEnvVarsSecret: ""
  ingress:
    ## @param platform.ingress.enabled Enable ingress platform resource
    enabled: false
    ## @param platform.ingress.ingressClassName Ingress class name for the platform
    ingressClassName: ""
    ## @param platform.ingress.host Platform host
    host: "platform.local"
    tls:
      ## @param platform.ingress.tls.enabled Enable Platform TLS
      enabled: false
      ## @param platform.ingress.tls.host Platform Host
      host:
      ## @param platform.ingress.tls.secretRef Secret name with keystore to load
      secretRef: ""
      ## @param platform.ingress.annotations Additional annotations for the ingress
    annotations: {}

  resources:
    limits:
      ## @param platform.resources.limits.cpu CPU limit for the platform container
      cpu: 4000m
      ## @param platform.resources.limits.memory Memory limit for the container
      memory: 8Gi
    requests:
      ## @param platform.resources.requests.cpu CPU resource requests
      cpu: 2000m
      ## @param platform.resources.requests.memory Memory resource requests
      memory: 4Gi

## @section Dependencies
## @descriptionStart
## Enable and configure chart dependencies if not available in your deployment
## @descriptionEnd
## ref: https://github.com/bitnami/charts/blob/main/bitnami/postgresql/values.yaml
postgresql:
  ## @param postgresql.enabled Switch to enable or disable the PostgreSQL helm chart
  enabled: true
  auth:
    ## @param postgresql.auth.username Name for a custom user to create
    username: conduktor
    ## @param postgresql.auth.password Password for the custom user to create
    password: conduktorpassword  # pragma: allowlist secret
    ## @param postgresql.auth.postgresPassword Password for the "postgres" admin user.
    postgresPassword: ""
    ## @param postgresql.auth.database Name for a custom database to create
    database: conduktor_platform
  primary:
    ## @param postgresql.primary.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for PostgreSQL Primary nodes
    ##
    extraEnvVarsCM: "postgresql-extra-env-vars"

## ref: https://github.com/bitnami/charts/tree/main/bitnami/minio
minio:
  ## @param minio.enabled Switch to enable or disable the Minio helm chart
  enabled: true
  ## @param minio.mode Minio mode (standalone or distributed)
  mode: standalone
  ## @param minio.disableWebUI Toggle Minio Console
  disableWebUI: true
  ## @param minio.defaultBuckets Default buckets to create
  defaultBuckets: "conduktor-monitoring"
  auth:
    ## @param minio.auth.rootUser Root access key
    rootUser: ""
    ## @param minio.auth.rootPassword Root secret key
    rootPassword: ""
    ## @param minio.auth.existingSecret Name of existing secret containing minio credentials (must contain root-user and root-password keys)
    existingSecret: ""
  persistence:
    ## @param minio.persistence.enabled Enable Minio persistence
    enabled: true
    ## @param minio.persistence.size Size of Minio volume
    size: 8Gi

## Kafka chart configuration
## ref: https://github.com/bitnami/charts/blob/master/bitnami/kafka/values.yaml
kafka:
  ## @param kafka.enabled Deploy a kafka alongside platform-controller (This should only be used for testing purpose)
  enabled: false
